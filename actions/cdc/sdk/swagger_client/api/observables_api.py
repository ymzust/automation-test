# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ObservablesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_incident_observable(self, id, body, **kwargs):  # noqa: E501
        """Add incident observable  # noqa: E501

        Add observable to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_incident_observable(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param Body7 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_incident_observable_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_incident_observable_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def add_incident_observable_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Add incident observable  # noqa: E501

        Add observable to incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_incident_observable_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param Body7 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_incident_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_incident_observable`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_incident_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/observable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def count_observables(self, **kwargs):  # noqa: E501
        """Count observables  # noqa: E501

        Count total number of observables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_observables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_observables_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.count_observables_with_http_info(**kwargs)  # noqa: E501
            return data

    def count_observables_with_http_info(self, **kwargs):  # noqa: E501
        """Count observables  # noqa: E501

        Count total number of observables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_observables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'organization', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_observables" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_observable(self, body, **kwargs):  # noqa: E501
        """Create observable  # noqa: E501

        Create a new observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_observable(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Observable body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_observable_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_observable_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_observable_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create observable  # noqa: E501

        Create a new observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_observable_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Observable body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Observable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_observable_enrichment(self, id, body, **kwargs):  # noqa: E501
        """Create observable enrichment  # noqa: E501

        Create observable enrichment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_observable_enrichment(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param list[Body2] body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: ObservableEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_observable_enrichment_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_observable_enrichment_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def create_observable_enrichment_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Create observable enrichment  # noqa: E501

        Create observable enrichment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_observable_enrichment_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param list[Body2] body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: ObservableEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_observable_enrichment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_observable_enrichment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_observable_enrichment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/{id}/enrichment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObservableEnrichment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_observable(self, id, **kwargs):  # noqa: E501
        """Get observable  # noqa: E501

        Get one observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observable(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_observable_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_observable_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_observable_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get observable  # noqa: E501

        Get one observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observable_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Observable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_observables(self, **kwargs):  # noqa: E501
        """Get observables  # noqa: E501

        Get list of observables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str search:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str organization:
        :param str select:
        :param str authorization:
        :param str set_cookie:
        :return: list[Observable]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_observables_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_observables_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_observables_with_http_info(self, **kwargs):  # noqa: E501
        """Get observables  # noqa: E501

        Get list of observables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str search:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str organization:
        :param str select:
        :param str authorization:
        :param str set_cookie:
        :return: list[Observable]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'search', 'sort', 'limit', 'skip', 'organization', 'select', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_observables" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Observable]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def global_search(self, search, **kwargs):  # noqa: E501
        """Global search  # noqa: E501

        Global search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_search(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Search query (required)
        :param str where:
        :param int limit:
        :param int skip:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_search_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.global_search_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def global_search_with_http_info(self, search, **kwargs):  # noqa: E501
        """Global search  # noqa: E501

        Global search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_search_with_http_info(search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Search query (required)
        :param str where:
        :param int limit:
        :param int skip:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'where', 'limit', 'skip', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `global_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_incident_observable(self, id, observable_id, **kwargs):  # noqa: E501
        """Remove incident observable  # noqa: E501

        Remove observable from incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_incident_observable(id, observable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param str observable_id: Observable id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_incident_observable_with_http_info(id, observable_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_incident_observable_with_http_info(id, observable_id, **kwargs)  # noqa: E501
            return data

    def remove_incident_observable_with_http_info(self, id, observable_id, **kwargs):  # noqa: E501
        """Remove incident observable  # noqa: E501

        Remove observable from incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_incident_observable_with_http_info(id, observable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param str observable_id: Observable id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'observable_id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_incident_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_incident_observable`")  # noqa: E501
        # verify the required parameter 'observable_id' is set
        if ('observable_id' not in params or
                params['observable_id'] is None):
            raise ValueError("Missing the required parameter `observable_id` when calling `remove_incident_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'observable_id' in params:
            path_params['observableId'] = params['observable_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/observable/{observableId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_observable(self, id, **kwargs):  # noqa: E501
        """Remove observable  # noqa: E501

        Remove existing observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_observable(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str authorization:
        :param str set_cookie:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_observable_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_observable_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_observable_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove observable  # noqa: E501

        Remove existing observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_observable_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str authorization:
        :param str set_cookie:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_observables(self, **kwargs):  # noqa: E501
        """Search observables  # noqa: E501

        Note that this list includes arhived observables, unlike default GET request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_observables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_observables_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_observables_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_observables_with_http_info(self, **kwargs):  # noqa: E501
        """Search observables  # noqa: E501

        Note that this list includes arhived observables, unlike default GET request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_observables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'sort', 'limit', 'skip', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_observables" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_observable(self, id, body, **kwargs):  # noqa: E501
        """Update observable  # noqa: E501

        Update an existing observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_observable(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param Observable body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_observable_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_observable_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_observable_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update observable  # noqa: E501

        Update an existing observable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_observable_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param Observable body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Observable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_observable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_observable`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_observable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Observable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_observable_enrichment(self, id, enrichment_id, body, **kwargs):  # noqa: E501
        """Update observable enrichment  # noqa: E501

        Update observable enrichment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_observable_enrichment(id, enrichment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str enrichment_id: (required)
        :param list[Body3] body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: ObservableEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_observable_enrichment_with_http_info(id, enrichment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_observable_enrichment_with_http_info(id, enrichment_id, body, **kwargs)  # noqa: E501
            return data

    def update_observable_enrichment_with_http_info(self, id, enrichment_id, body, **kwargs):  # noqa: E501
        """Update observable enrichment  # noqa: E501

        Update observable enrichment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_observable_enrichment_with_http_info(id, enrichment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Observable ID (required)
        :param str enrichment_id: (required)
        :param list[Body3] body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: ObservableEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enrichment_id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_observable_enrichment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_observable_enrichment`")  # noqa: E501
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params or
                params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `update_observable_enrichment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_observable_enrichment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/observable/{id}/enrichment/{enrichmentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObservableEnrichment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
