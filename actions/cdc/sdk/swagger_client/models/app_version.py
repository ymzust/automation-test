# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AppVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'commit': 'str',
        'branch': 'str',
        'node_env': 'str'
    }

    attribute_map = {
        'version': 'version',
        'commit': 'commit',
        'branch': 'branch',
        'node_env': 'NODE_ENV'
    }

    def __init__(self, version=None, commit=None, branch=None, node_env=None):  # noqa: E501
        """AppVersion - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._commit = None
        self._branch = None
        self._node_env = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if commit is not None:
            self.commit = commit
        if branch is not None:
            self.branch = branch
        if node_env is not None:
            self.node_env = node_env

    @property
    def version(self):
        """Gets the version of this AppVersion.  # noqa: E501


        :return: The version of this AppVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AppVersion.


        :param version: The version of this AppVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def commit(self):
        """Gets the commit of this AppVersion.  # noqa: E501


        :return: The commit of this AppVersion.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this AppVersion.


        :param commit: The commit of this AppVersion.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def branch(self):
        """Gets the branch of this AppVersion.  # noqa: E501


        :return: The branch of this AppVersion.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this AppVersion.


        :param branch: The branch of this AppVersion.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def node_env(self):
        """Gets the node_env of this AppVersion.  # noqa: E501


        :return: The node_env of this AppVersion.  # noqa: E501
        :rtype: str
        """
        return self._node_env

    @node_env.setter
    def node_env(self, node_env):
        """Sets the node_env of this AppVersion.


        :param node_env: The node_env of this AppVersion.  # noqa: E501
        :type: str
        """

        self._node_env = node_env

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
