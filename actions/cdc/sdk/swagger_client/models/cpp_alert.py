# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.cpp_alert_edges import CppAlertEdges  # noqa: F401,E501
from swagger_client.models.cpp_alert_events import CppAlertEvents  # noqa: F401,E501
from swagger_client.models.cpp_alert_irrelevant_by import CppAlertIrrelevantBy  # noqa: F401,E501


class CppAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'events': 'list[CppAlertEvents]',
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'created': 'str',
        'modified': 'str',
        'detected': 'str',
        'organization': 'str',
        'source': 'str',
        'source_id': 'str',
        'priority': 'str',
        'severity': 'str',
        'status': 'str',
        'raw': 'object',
        'type': 'object',
        'sub_type': 'object',
        'organization_name': 'str',
        'edges': 'list[CppAlertEdges]',
        'end_sla_date': 'date',
        'irrelevant_by': 'CppAlertIrrelevantBy',
        'false_positive': 'int',
        'status_changed_at': 'date'
    }

    attribute_map = {
        'events': 'events',
        'id': '_id',
        'name': 'name',
        'description': 'description',
        'created': 'created',
        'modified': 'modified',
        'detected': 'detected',
        'organization': 'organization',
        'source': 'source',
        'source_id': 'sourceId',
        'priority': 'priority',
        'severity': 'severity',
        'status': 'status',
        'raw': 'raw',
        'type': 'type',
        'sub_type': 'subType',
        'organization_name': 'organizationName',
        'edges': 'edges',
        'end_sla_date': 'endSlaDate',
        'irrelevant_by': 'irrelevantBy',
        'false_positive': 'falsePositive',
        'status_changed_at': 'statusChangedAt'
    }

    def __init__(self, events=None, id=None, name=None, description=None, created=None, modified=None, detected=None, organization=None, source=None, source_id=None, priority=None, severity=None, status=None, raw=None, type=None, sub_type=None, organization_name=None, edges=None, end_sla_date=None, irrelevant_by=None, false_positive=None, status_changed_at=None):  # noqa: E501
        """CppAlert - a model defined in Swagger"""  # noqa: E501

        self._events = None
        self._id = None
        self._name = None
        self._description = None
        self._created = None
        self._modified = None
        self._detected = None
        self._organization = None
        self._source = None
        self._source_id = None
        self._priority = None
        self._severity = None
        self._status = None
        self._raw = None
        self._type = None
        self._sub_type = None
        self._organization_name = None
        self._edges = None
        self._end_sla_date = None
        self._irrelevant_by = None
        self._false_positive = None
        self._status_changed_at = None
        self.discriminator = None

        if events is not None:
            self.events = events
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if detected is not None:
            self.detected = detected
        if organization is not None:
            self.organization = organization
        if source is not None:
            self.source = source
        if source_id is not None:
            self.source_id = source_id
        if priority is not None:
            self.priority = priority
        if severity is not None:
            self.severity = severity
        if status is not None:
            self.status = status
        if raw is not None:
            self.raw = raw
        if type is not None:
            self.type = type
        if sub_type is not None:
            self.sub_type = sub_type
        if organization_name is not None:
            self.organization_name = organization_name
        if edges is not None:
            self.edges = edges
        if end_sla_date is not None:
            self.end_sla_date = end_sla_date
        if irrelevant_by is not None:
            self.irrelevant_by = irrelevant_by
        if false_positive is not None:
            self.false_positive = false_positive
        if status_changed_at is not None:
            self.status_changed_at = status_changed_at

    @property
    def events(self):
        """Gets the events of this CppAlert.  # noqa: E501


        :return: The events of this CppAlert.  # noqa: E501
        :rtype: list[CppAlertEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CppAlert.


        :param events: The events of this CppAlert.  # noqa: E501
        :type: list[CppAlertEvents]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this CppAlert.  # noqa: E501


        :return: The id of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CppAlert.


        :param id: The id of this CppAlert.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CppAlert.  # noqa: E501


        :return: The name of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CppAlert.


        :param name: The name of this CppAlert.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CppAlert.  # noqa: E501


        :return: The description of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CppAlert.


        :param description: The description of this CppAlert.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created(self):
        """Gets the created of this CppAlert.  # noqa: E501


        :return: The created of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CppAlert.


        :param created: The created of this CppAlert.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this CppAlert.  # noqa: E501


        :return: The modified of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CppAlert.


        :param modified: The modified of this CppAlert.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def detected(self):
        """Gets the detected of this CppAlert.  # noqa: E501


        :return: The detected of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._detected

    @detected.setter
    def detected(self, detected):
        """Sets the detected of this CppAlert.


        :param detected: The detected of this CppAlert.  # noqa: E501
        :type: str
        """

        self._detected = detected

    @property
    def organization(self):
        """Gets the organization of this CppAlert.  # noqa: E501


        :return: The organization of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CppAlert.


        :param organization: The organization of this CppAlert.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def source(self):
        """Gets the source of this CppAlert.  # noqa: E501


        :return: The source of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CppAlert.


        :param source: The source of this CppAlert.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this CppAlert.  # noqa: E501


        :return: The source_id of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CppAlert.


        :param source_id: The source_id of this CppAlert.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def priority(self):
        """Gets the priority of this CppAlert.  # noqa: E501


        :return: The priority of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CppAlert.


        :param priority: The priority of this CppAlert.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def severity(self):
        """Gets the severity of this CppAlert.  # noqa: E501


        :return: The severity of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CppAlert.


        :param severity: The severity of this CppAlert.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this CppAlert.  # noqa: E501


        :return: The status of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CppAlert.


        :param status: The status of this CppAlert.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def raw(self):
        """Gets the raw of this CppAlert.  # noqa: E501


        :return: The raw of this CppAlert.  # noqa: E501
        :rtype: object
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this CppAlert.


        :param raw: The raw of this CppAlert.  # noqa: E501
        :type: object
        """

        self._raw = raw

    @property
    def type(self):
        """Gets the type of this CppAlert.  # noqa: E501


        :return: The type of this CppAlert.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CppAlert.


        :param type: The type of this CppAlert.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def sub_type(self):
        """Gets the sub_type of this CppAlert.  # noqa: E501


        :return: The sub_type of this CppAlert.  # noqa: E501
        :rtype: object
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this CppAlert.


        :param sub_type: The sub_type of this CppAlert.  # noqa: E501
        :type: object
        """

        self._sub_type = sub_type

    @property
    def organization_name(self):
        """Gets the organization_name of this CppAlert.  # noqa: E501


        :return: The organization_name of this CppAlert.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this CppAlert.


        :param organization_name: The organization_name of this CppAlert.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def edges(self):
        """Gets the edges of this CppAlert.  # noqa: E501


        :return: The edges of this CppAlert.  # noqa: E501
        :rtype: list[CppAlertEdges]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this CppAlert.


        :param edges: The edges of this CppAlert.  # noqa: E501
        :type: list[CppAlertEdges]
        """

        self._edges = edges

    @property
    def end_sla_date(self):
        """Gets the end_sla_date of this CppAlert.  # noqa: E501


        :return: The end_sla_date of this CppAlert.  # noqa: E501
        :rtype: date
        """
        return self._end_sla_date

    @end_sla_date.setter
    def end_sla_date(self, end_sla_date):
        """Sets the end_sla_date of this CppAlert.


        :param end_sla_date: The end_sla_date of this CppAlert.  # noqa: E501
        :type: date
        """

        self._end_sla_date = end_sla_date

    @property
    def irrelevant_by(self):
        """Gets the irrelevant_by of this CppAlert.  # noqa: E501


        :return: The irrelevant_by of this CppAlert.  # noqa: E501
        :rtype: CppAlertIrrelevantBy
        """
        return self._irrelevant_by

    @irrelevant_by.setter
    def irrelevant_by(self, irrelevant_by):
        """Sets the irrelevant_by of this CppAlert.


        :param irrelevant_by: The irrelevant_by of this CppAlert.  # noqa: E501
        :type: CppAlertIrrelevantBy
        """

        self._irrelevant_by = irrelevant_by

    @property
    def false_positive(self):
        """Gets the false_positive of this CppAlert.  # noqa: E501


        :return: The false_positive of this CppAlert.  # noqa: E501
        :rtype: int
        """
        return self._false_positive

    @false_positive.setter
    def false_positive(self, false_positive):
        """Sets the false_positive of this CppAlert.


        :param false_positive: The false_positive of this CppAlert.  # noqa: E501
        :type: int
        """

        self._false_positive = false_positive

    @property
    def status_changed_at(self):
        """Gets the status_changed_at of this CppAlert.  # noqa: E501


        :return: The status_changed_at of this CppAlert.  # noqa: E501
        :rtype: date
        """
        return self._status_changed_at

    @status_changed_at.setter
    def status_changed_at(self, status_changed_at):
        """Sets the status_changed_at of this CppAlert.


        :param status_changed_at: The status_changed_at of this CppAlert.  # noqa: E501
        :type: date
        """

        self._status_changed_at = status_changed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CppAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
