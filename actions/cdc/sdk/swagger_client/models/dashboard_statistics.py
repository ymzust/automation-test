# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.dashboard_statistics_alerts_trendline import DashboardStatisticsAlertsTrendline  # noqa: F401,E501
from swagger_client.models.dashboard_statistics_incidents_by_status import DashboardStatisticsIncidentsByStatus  # noqa: F401,E501
from swagger_client.models.dashboard_statistics_unhandled_incidents import DashboardStatisticsUnhandledIncidents  # noqa: F401,E501


class DashboardStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unhandled_incidents': 'DashboardStatisticsUnhandledIncidents',
        'unhandled_alerts': 'DashboardStatisticsUnhandledIncidents',
        'irrelevant_alerts': 'DashboardStatisticsUnhandledIncidents',
        'mean_response_time': 'DashboardStatisticsUnhandledIncidents',
        'alerts_trendline': 'list[DashboardStatisticsAlertsTrendline]',
        'incidents_by_status': 'DashboardStatisticsIncidentsByStatus',
        'most_used_tags': 'list[str]'
    }

    attribute_map = {
        'unhandled_incidents': 'unhandledIncidents',
        'unhandled_alerts': 'unhandledAlerts',
        'irrelevant_alerts': 'irrelevantAlerts',
        'mean_response_time': 'meanResponseTime',
        'alerts_trendline': 'alertsTrendline',
        'incidents_by_status': 'incidentsByStatus',
        'most_used_tags': 'mostUsedTags'
    }

    def __init__(self, unhandled_incidents=None, unhandled_alerts=None, irrelevant_alerts=None, mean_response_time=None, alerts_trendline=None, incidents_by_status=None, most_used_tags=None):  # noqa: E501
        """DashboardStatistics - a model defined in Swagger"""  # noqa: E501

        self._unhandled_incidents = None
        self._unhandled_alerts = None
        self._irrelevant_alerts = None
        self._mean_response_time = None
        self._alerts_trendline = None
        self._incidents_by_status = None
        self._most_used_tags = None
        self.discriminator = None

        if unhandled_incidents is not None:
            self.unhandled_incidents = unhandled_incidents
        if unhandled_alerts is not None:
            self.unhandled_alerts = unhandled_alerts
        if irrelevant_alerts is not None:
            self.irrelevant_alerts = irrelevant_alerts
        if mean_response_time is not None:
            self.mean_response_time = mean_response_time
        if alerts_trendline is not None:
            self.alerts_trendline = alerts_trendline
        if incidents_by_status is not None:
            self.incidents_by_status = incidents_by_status
        if most_used_tags is not None:
            self.most_used_tags = most_used_tags

    @property
    def unhandled_incidents(self):
        """Gets the unhandled_incidents of this DashboardStatistics.  # noqa: E501


        :return: The unhandled_incidents of this DashboardStatistics.  # noqa: E501
        :rtype: DashboardStatisticsUnhandledIncidents
        """
        return self._unhandled_incidents

    @unhandled_incidents.setter
    def unhandled_incidents(self, unhandled_incidents):
        """Sets the unhandled_incidents of this DashboardStatistics.


        :param unhandled_incidents: The unhandled_incidents of this DashboardStatistics.  # noqa: E501
        :type: DashboardStatisticsUnhandledIncidents
        """

        self._unhandled_incidents = unhandled_incidents

    @property
    def unhandled_alerts(self):
        """Gets the unhandled_alerts of this DashboardStatistics.  # noqa: E501


        :return: The unhandled_alerts of this DashboardStatistics.  # noqa: E501
        :rtype: DashboardStatisticsUnhandledIncidents
        """
        return self._unhandled_alerts

    @unhandled_alerts.setter
    def unhandled_alerts(self, unhandled_alerts):
        """Sets the unhandled_alerts of this DashboardStatistics.


        :param unhandled_alerts: The unhandled_alerts of this DashboardStatistics.  # noqa: E501
        :type: DashboardStatisticsUnhandledIncidents
        """

        self._unhandled_alerts = unhandled_alerts

    @property
    def irrelevant_alerts(self):
        """Gets the irrelevant_alerts of this DashboardStatistics.  # noqa: E501


        :return: The irrelevant_alerts of this DashboardStatistics.  # noqa: E501
        :rtype: DashboardStatisticsUnhandledIncidents
        """
        return self._irrelevant_alerts

    @irrelevant_alerts.setter
    def irrelevant_alerts(self, irrelevant_alerts):
        """Sets the irrelevant_alerts of this DashboardStatistics.


        :param irrelevant_alerts: The irrelevant_alerts of this DashboardStatistics.  # noqa: E501
        :type: DashboardStatisticsUnhandledIncidents
        """

        self._irrelevant_alerts = irrelevant_alerts

    @property
    def mean_response_time(self):
        """Gets the mean_response_time of this DashboardStatistics.  # noqa: E501


        :return: The mean_response_time of this DashboardStatistics.  # noqa: E501
        :rtype: DashboardStatisticsUnhandledIncidents
        """
        return self._mean_response_time

    @mean_response_time.setter
    def mean_response_time(self, mean_response_time):
        """Sets the mean_response_time of this DashboardStatistics.


        :param mean_response_time: The mean_response_time of this DashboardStatistics.  # noqa: E501
        :type: DashboardStatisticsUnhandledIncidents
        """

        self._mean_response_time = mean_response_time

    @property
    def alerts_trendline(self):
        """Gets the alerts_trendline of this DashboardStatistics.  # noqa: E501


        :return: The alerts_trendline of this DashboardStatistics.  # noqa: E501
        :rtype: list[DashboardStatisticsAlertsTrendline]
        """
        return self._alerts_trendline

    @alerts_trendline.setter
    def alerts_trendline(self, alerts_trendline):
        """Sets the alerts_trendline of this DashboardStatistics.


        :param alerts_trendline: The alerts_trendline of this DashboardStatistics.  # noqa: E501
        :type: list[DashboardStatisticsAlertsTrendline]
        """

        self._alerts_trendline = alerts_trendline

    @property
    def incidents_by_status(self):
        """Gets the incidents_by_status of this DashboardStatistics.  # noqa: E501


        :return: The incidents_by_status of this DashboardStatistics.  # noqa: E501
        :rtype: DashboardStatisticsIncidentsByStatus
        """
        return self._incidents_by_status

    @incidents_by_status.setter
    def incidents_by_status(self, incidents_by_status):
        """Sets the incidents_by_status of this DashboardStatistics.


        :param incidents_by_status: The incidents_by_status of this DashboardStatistics.  # noqa: E501
        :type: DashboardStatisticsIncidentsByStatus
        """

        self._incidents_by_status = incidents_by_status

    @property
    def most_used_tags(self):
        """Gets the most_used_tags of this DashboardStatistics.  # noqa: E501


        :return: The most_used_tags of this DashboardStatistics.  # noqa: E501
        :rtype: list[str]
        """
        return self._most_used_tags

    @most_used_tags.setter
    def most_used_tags(self, most_used_tags):
        """Sets the most_used_tags of this DashboardStatistics.


        :param most_used_tags: The most_used_tags of this DashboardStatistics.  # noqa: E501
        :type: list[str]
        """

        self._most_used_tags = most_used_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
