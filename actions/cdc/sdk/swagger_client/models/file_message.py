# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FileMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'channel': 'str',
        'incident': 'str',
        'type': 'str',
        'tags': 'list[str]',
        'file': 'str'
    }

    attribute_map = {
        'text': 'text',
        'channel': 'channel',
        'incident': 'incident',
        'type': 'type',
        'tags': 'tags',
        'file': 'file'
    }

    def __init__(self, text=None, channel=None, incident=None, type=None, tags=None, file=None):  # noqa: E501
        """FileMessage - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._channel = None
        self._incident = None
        self._type = None
        self._tags = None
        self._file = None
        self.discriminator = None

        self.text = text
        if channel is not None:
            self.channel = channel
        if incident is not None:
            self.incident = incident
        self.type = type
        if tags is not None:
            self.tags = tags
        if file is not None:
            self.file = file

    @property
    def text(self):
        """Gets the text of this FileMessage.  # noqa: E501


        :return: The text of this FileMessage.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FileMessage.


        :param text: The text of this FileMessage.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def channel(self):
        """Gets the channel of this FileMessage.  # noqa: E501

        Channel id to post to the channel  # noqa: E501

        :return: The channel of this FileMessage.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this FileMessage.

        Channel id to post to the channel  # noqa: E501

        :param channel: The channel of this FileMessage.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def incident(self):
        """Gets the incident of this FileMessage.  # noqa: E501

        Incident id to post to the incident  # noqa: E501

        :return: The incident of this FileMessage.  # noqa: E501
        :rtype: str
        """
        return self._incident

    @incident.setter
    def incident(self, incident):
        """Sets the incident of this FileMessage.

        Incident id to post to the incident  # noqa: E501

        :param incident: The incident of this FileMessage.  # noqa: E501
        :type: str
        """

        self._incident = incident

    @property
    def type(self):
        """Gets the type of this FileMessage.  # noqa: E501


        :return: The type of this FileMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileMessage.


        :param type: The type of this FileMessage.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["image", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this FileMessage.  # noqa: E501


        :return: The tags of this FileMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FileMessage.


        :param tags: The tags of this FileMessage.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def file(self):
        """Gets the file of this FileMessage.  # noqa: E501

        File to upload  # noqa: E501

        :return: The file of this FileMessage.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileMessage.

        File to upload  # noqa: E501

        :param file: The file of this FileMessage.  # noqa: E501
        :type: str
        """

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
