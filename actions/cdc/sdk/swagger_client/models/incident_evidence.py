# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.incident_evidence_item import IncidentEvidenceItem  # noqa: F401,E501


class IncidentEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'created': 'date',
        'reported': 'date',
        'item': 'IncidentEvidenceItem'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'created': 'created',
        'reported': 'reported',
        'item': 'item'
    }

    def __init__(self, id=None, name=None, description=None, type=None, created=None, reported=None, item=None):  # noqa: E501
        """IncidentEvidence - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._created = None
        self._reported = None
        self._item = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if created is not None:
            self.created = created
        if reported is not None:
            self.reported = reported
        if item is not None:
            self.item = item

    @property
    def id(self):
        """Gets the id of this IncidentEvidence.  # noqa: E501


        :return: The id of this IncidentEvidence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncidentEvidence.


        :param id: The id of this IncidentEvidence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IncidentEvidence.  # noqa: E501


        :return: The name of this IncidentEvidence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IncidentEvidence.


        :param name: The name of this IncidentEvidence.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this IncidentEvidence.  # noqa: E501


        :return: The description of this IncidentEvidence.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IncidentEvidence.


        :param description: The description of this IncidentEvidence.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this IncidentEvidence.  # noqa: E501


        :return: The type of this IncidentEvidence.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IncidentEvidence.


        :param type: The type of this IncidentEvidence.  # noqa: E501
        :type: str
        """
        allowed_values = ["evidence"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created(self):
        """Gets the created of this IncidentEvidence.  # noqa: E501


        :return: The created of this IncidentEvidence.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this IncidentEvidence.


        :param created: The created of this IncidentEvidence.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def reported(self):
        """Gets the reported of this IncidentEvidence.  # noqa: E501


        :return: The reported of this IncidentEvidence.  # noqa: E501
        :rtype: date
        """
        return self._reported

    @reported.setter
    def reported(self, reported):
        """Sets the reported of this IncidentEvidence.


        :param reported: The reported of this IncidentEvidence.  # noqa: E501
        :type: date
        """

        self._reported = reported

    @property
    def item(self):
        """Gets the item of this IncidentEvidence.  # noqa: E501


        :return: The item of this IncidentEvidence.  # noqa: E501
        :rtype: IncidentEvidenceItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this IncidentEvidence.


        :param item: The item of this IncidentEvidence.  # noqa: E501
        :type: IncidentEvidenceItem
        """

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
