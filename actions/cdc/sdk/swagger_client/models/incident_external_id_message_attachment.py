# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentExternalIdMessageAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'filename': 'str',
        'filesize': 'str',
        'thumbnail': 'str',
        'title': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'url': 'url',
        'filename': 'filename',
        'filesize': 'filesize',
        'thumbnail': 'thumbnail',
        'title': 'title',
        'comment': 'comment'
    }

    def __init__(self, url=None, filename=None, filesize=None, thumbnail=None, title=None, comment=None):  # noqa: E501
        """IncidentExternalIdMessageAttachment - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._filename = None
        self._filesize = None
        self._thumbnail = None
        self._title = None
        self._comment = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if filename is not None:
            self.filename = filename
        if filesize is not None:
            self.filesize = filesize
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if title is not None:
            self.title = title
        if comment is not None:
            self.comment = comment

    @property
    def url(self):
        """Gets the url of this IncidentExternalIdMessageAttachment.  # noqa: E501


        :return: The url of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IncidentExternalIdMessageAttachment.


        :param url: The url of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def filename(self):
        """Gets the filename of this IncidentExternalIdMessageAttachment.  # noqa: E501


        :return: The filename of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this IncidentExternalIdMessageAttachment.


        :param filename: The filename of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def filesize(self):
        """Gets the filesize of this IncidentExternalIdMessageAttachment.  # noqa: E501


        :return: The filesize of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this IncidentExternalIdMessageAttachment.


        :param filesize: The filesize of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._filesize = filesize

    @property
    def thumbnail(self):
        """Gets the thumbnail of this IncidentExternalIdMessageAttachment.  # noqa: E501

        Url of image thumbnail  # noqa: E501

        :return: The thumbnail of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this IncidentExternalIdMessageAttachment.

        Url of image thumbnail  # noqa: E501

        :param thumbnail: The thumbnail of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this IncidentExternalIdMessageAttachment.  # noqa: E501


        :return: The title of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IncidentExternalIdMessageAttachment.


        :param title: The title of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def comment(self):
        """Gets the comment of this IncidentExternalIdMessageAttachment.  # noqa: E501


        :return: The comment of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IncidentExternalIdMessageAttachment.


        :param comment: The comment of this IncidentExternalIdMessageAttachment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentExternalIdMessageAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
