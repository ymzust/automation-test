# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.channel_users import ChannelUsers  # noqa: F401,E501


class MessageThreadComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'owner': 'ChannelUsers',
        'created': 'date',
        'edited': 'date',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': '_id',
        'text': 'text',
        'owner': 'owner',
        'created': 'created',
        'edited': 'edited',
        'tags': 'tags'
    }

    def __init__(self, id=None, text=None, owner=None, created=None, edited=None, tags=None):  # noqa: E501
        """MessageThreadComment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._text = None
        self._owner = None
        self._created = None
        self._edited = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.text = text
        if owner is not None:
            self.owner = owner
        if created is not None:
            self.created = created
        if edited is not None:
            self.edited = edited
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this MessageThreadComment.  # noqa: E501


        :return: The id of this MessageThreadComment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageThreadComment.


        :param id: The id of this MessageThreadComment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this MessageThreadComment.  # noqa: E501


        :return: The text of this MessageThreadComment.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessageThreadComment.


        :param text: The text of this MessageThreadComment.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def owner(self):
        """Gets the owner of this MessageThreadComment.  # noqa: E501


        :return: The owner of this MessageThreadComment.  # noqa: E501
        :rtype: ChannelUsers
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this MessageThreadComment.


        :param owner: The owner of this MessageThreadComment.  # noqa: E501
        :type: ChannelUsers
        """

        self._owner = owner

    @property
    def created(self):
        """Gets the created of this MessageThreadComment.  # noqa: E501


        :return: The created of this MessageThreadComment.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MessageThreadComment.


        :param created: The created of this MessageThreadComment.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def edited(self):
        """Gets the edited of this MessageThreadComment.  # noqa: E501


        :return: The edited of this MessageThreadComment.  # noqa: E501
        :rtype: date
        """
        return self._edited

    @edited.setter
    def edited(self, edited):
        """Sets the edited of this MessageThreadComment.


        :param edited: The edited of this MessageThreadComment.  # noqa: E501
        :type: date
        """

        self._edited = edited

    @property
    def tags(self):
        """Gets the tags of this MessageThreadComment.  # noqa: E501


        :return: The tags of this MessageThreadComment.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MessageThreadComment.


        :param tags: The tags of this MessageThreadComment.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageThreadComment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
