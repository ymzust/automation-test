# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.metamodel_available_values import MetamodelAvailableValues  # noqa: F401,E501


class Metamodel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'default_value': 'str',
        'field_name': 'str',
        'available_values': 'list[MetamodelAvailableValues]',
        'created': 'date',
        'modified': 'date'
    }

    attribute_map = {
        'id': '_id',
        'model': 'model',
        'default_value': 'defaultValue',
        'field_name': 'fieldName',
        'available_values': 'availableValues',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, id=None, model=None, default_value=None, field_name=None, available_values=None, created=None, modified=None):  # noqa: E501
        """Metamodel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._model = None
        self._default_value = None
        self._field_name = None
        self._available_values = None
        self._created = None
        self._modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.model = model
        if default_value is not None:
            self.default_value = default_value
        self.field_name = field_name
        self.available_values = available_values
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Metamodel.  # noqa: E501


        :return: The id of this Metamodel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metamodel.


        :param id: The id of this Metamodel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this Metamodel.  # noqa: E501


        :return: The model of this Metamodel.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Metamodel.


        :param model: The model of this Metamodel.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def default_value(self):
        """Gets the default_value of this Metamodel.  # noqa: E501


        :return: The default_value of this Metamodel.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Metamodel.


        :param default_value: The default_value of this Metamodel.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def field_name(self):
        """Gets the field_name of this Metamodel.  # noqa: E501


        :return: The field_name of this Metamodel.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this Metamodel.


        :param field_name: The field_name of this Metamodel.  # noqa: E501
        :type: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501

        self._field_name = field_name

    @property
    def available_values(self):
        """Gets the available_values of this Metamodel.  # noqa: E501


        :return: The available_values of this Metamodel.  # noqa: E501
        :rtype: list[MetamodelAvailableValues]
        """
        return self._available_values

    @available_values.setter
    def available_values(self, available_values):
        """Sets the available_values of this Metamodel.


        :param available_values: The available_values of this Metamodel.  # noqa: E501
        :type: list[MetamodelAvailableValues]
        """
        if available_values is None:
            raise ValueError("Invalid value for `available_values`, must not be `None`")  # noqa: E501

        self._available_values = available_values

    @property
    def created(self):
        """Gets the created of this Metamodel.  # noqa: E501


        :return: The created of this Metamodel.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Metamodel.


        :param created: The created of this Metamodel.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Metamodel.  # noqa: E501


        :return: The modified of this Metamodel.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Metamodel.


        :param modified: The modified of this Metamodel.  # noqa: E501
        :type: date
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metamodel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
