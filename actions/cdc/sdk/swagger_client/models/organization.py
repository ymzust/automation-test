# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.organization_contacts import OrganizationContacts  # noqa: F401,E501
from swagger_client.models.organization_params import OrganizationParams  # noqa: F401,E501
from swagger_client.models.organization_sla import OrganizationSla  # noqa: F401,E501


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parent': 'str',
        'contacts': 'list[OrganizationContacts]',
        'created': 'date',
        'modified': 'date',
        'short_name': 'str',
        'two_factor_enabled': 'str',
        'two_factor_set_explicit': 'str',
        'sticky_max_age': 'int',
        'sticky_max_age_explicit': 'int',
        'sla': 'OrganizationSla',
        'params': 'list[OrganizationParams]'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'parent': 'parent',
        'contacts': 'contacts',
        'created': 'created',
        'modified': 'modified',
        'short_name': 'shortName',
        'two_factor_enabled': 'twoFactorEnabled',
        'two_factor_set_explicit': 'twoFactorSetExplicit',
        'sticky_max_age': 'stickyMaxAge',
        'sticky_max_age_explicit': 'stickyMaxAgeExplicit',
        'sla': 'sla',
        'params': 'params'
    }

    def __init__(self, id=None, name=None, parent=None, contacts=None, created=None, modified=None, short_name=None, two_factor_enabled=None, two_factor_set_explicit=None, sticky_max_age=None, sticky_max_age_explicit=None, sla=None, params=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._parent = None
        self._contacts = None
        self._created = None
        self._modified = None
        self._short_name = None
        self._two_factor_enabled = None
        self._two_factor_set_explicit = None
        self._sticky_max_age = None
        self._sticky_max_age_explicit = None
        self._sla = None
        self._params = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if parent is not None:
            self.parent = parent
        if contacts is not None:
            self.contacts = contacts
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        self.short_name = short_name
        if two_factor_enabled is not None:
            self.two_factor_enabled = two_factor_enabled
        if two_factor_set_explicit is not None:
            self.two_factor_set_explicit = two_factor_set_explicit
        if sticky_max_age is not None:
            self.sticky_max_age = sticky_max_age
        if sticky_max_age_explicit is not None:
            self.sticky_max_age_explicit = sticky_max_age_explicit
        if sla is not None:
            self.sla = sla
        if params is not None:
            self.params = params

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Organization.  # noqa: E501


        :return: The parent of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Organization.


        :param parent: The parent of this Organization.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def contacts(self):
        """Gets the contacts of this Organization.  # noqa: E501


        :return: The contacts of this Organization.  # noqa: E501
        :rtype: list[OrganizationContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Organization.


        :param contacts: The contacts of this Organization.  # noqa: E501
        :type: list[OrganizationContacts]
        """

        self._contacts = contacts

    @property
    def created(self):
        """Gets the created of this Organization.  # noqa: E501


        :return: The created of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Organization.


        :param created: The created of this Organization.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Organization.  # noqa: E501


        :return: The modified of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Organization.


        :param modified: The modified of this Organization.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def short_name(self):
        """Gets the short_name of this Organization.  # noqa: E501

        Organization short name  # noqa: E501

        :return: The short_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Organization.

        Organization short name  # noqa: E501

        :param short_name: The short_name of this Organization.  # noqa: E501
        :type: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")  # noqa: E501
        if short_name is not None and len(short_name) > 3:
            raise ValueError("Invalid value for `short_name`, length must be less than or equal to `3`")  # noqa: E501
        if short_name is not None and len(short_name) < 3:
            raise ValueError("Invalid value for `short_name`, length must be greater than or equal to `3`")  # noqa: E501

        self._short_name = short_name

    @property
    def two_factor_enabled(self):
        """Gets the two_factor_enabled of this Organization.  # noqa: E501

        Implicit status of two factor authentication  # noqa: E501

        :return: The two_factor_enabled of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._two_factor_enabled

    @two_factor_enabled.setter
    def two_factor_enabled(self, two_factor_enabled):
        """Sets the two_factor_enabled of this Organization.

        Implicit status of two factor authentication  # noqa: E501

        :param two_factor_enabled: The two_factor_enabled of this Organization.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if two_factor_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `two_factor_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(two_factor_enabled, allowed_values)
            )

        self._two_factor_enabled = two_factor_enabled

    @property
    def two_factor_set_explicit(self):
        """Gets the two_factor_set_explicit of this Organization.  # noqa: E501

        Explicit status of two factor authentication  # noqa: E501

        :return: The two_factor_set_explicit of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._two_factor_set_explicit

    @two_factor_set_explicit.setter
    def two_factor_set_explicit(self, two_factor_set_explicit):
        """Sets the two_factor_set_explicit of this Organization.

        Explicit status of two factor authentication  # noqa: E501

        :param two_factor_set_explicit: The two_factor_set_explicit of this Organization.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "inherit"]  # noqa: E501
        if two_factor_set_explicit not in allowed_values:
            raise ValueError(
                "Invalid value for `two_factor_set_explicit` ({0}), must be one of {1}"  # noqa: E501
                .format(two_factor_set_explicit, allowed_values)
            )

        self._two_factor_set_explicit = two_factor_set_explicit

    @property
    def sticky_max_age(self):
        """Gets the sticky_max_age of this Organization.  # noqa: E501

        Implicit value of 2fa sticky session duration  # noqa: E501

        :return: The sticky_max_age of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._sticky_max_age

    @sticky_max_age.setter
    def sticky_max_age(self, sticky_max_age):
        """Sets the sticky_max_age of this Organization.

        Implicit value of 2fa sticky session duration  # noqa: E501

        :param sticky_max_age: The sticky_max_age of this Organization.  # noqa: E501
        :type: int
        """

        self._sticky_max_age = sticky_max_age

    @property
    def sticky_max_age_explicit(self):
        """Gets the sticky_max_age_explicit of this Organization.  # noqa: E501

        Explicit value of 2fa sticky session duration  # noqa: E501

        :return: The sticky_max_age_explicit of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._sticky_max_age_explicit

    @sticky_max_age_explicit.setter
    def sticky_max_age_explicit(self, sticky_max_age_explicit):
        """Sets the sticky_max_age_explicit of this Organization.

        Explicit value of 2fa sticky session duration  # noqa: E501

        :param sticky_max_age_explicit: The sticky_max_age_explicit of this Organization.  # noqa: E501
        :type: int
        """

        self._sticky_max_age_explicit = sticky_max_age_explicit

    @property
    def sla(self):
        """Gets the sla of this Organization.  # noqa: E501


        :return: The sla of this Organization.  # noqa: E501
        :rtype: OrganizationSla
        """
        return self._sla

    @sla.setter
    def sla(self, sla):
        """Sets the sla of this Organization.


        :param sla: The sla of this Organization.  # noqa: E501
        :type: OrganizationSla
        """

        self._sla = sla

    @property
    def params(self):
        """Gets the params of this Organization.  # noqa: E501


        :return: The params of this Organization.  # noqa: E501
        :rtype: list[OrganizationParams]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Organization.


        :param params: The params of this Organization.  # noqa: E501
        :type: list[OrganizationParams]
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
