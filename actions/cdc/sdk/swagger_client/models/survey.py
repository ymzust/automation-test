# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Survey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'question': 'str',
        'answers': 'list[str]',
        'organization': 'str',
        'created': 'date',
        'modified': 'date'
    }

    attribute_map = {
        'id': '_id',
        'question': 'question',
        'answers': 'answers',
        'organization': 'organization',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, id=None, question=None, answers=None, organization=None, created=None, modified=None):  # noqa: E501
        """Survey - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._question = None
        self._answers = None
        self._organization = None
        self._created = None
        self._modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.question = question
        if answers is not None:
            self.answers = answers
        if organization is not None:
            self.organization = organization
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Survey.  # noqa: E501


        :return: The id of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Survey.


        :param id: The id of this Survey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def question(self):
        """Gets the question of this Survey.  # noqa: E501


        :return: The question of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Survey.


        :param question: The question of this Survey.  # noqa: E501
        :type: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def answers(self):
        """Gets the answers of this Survey.  # noqa: E501


        :return: The answers of this Survey.  # noqa: E501
        :rtype: list[str]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this Survey.


        :param answers: The answers of this Survey.  # noqa: E501
        :type: list[str]
        """

        self._answers = answers

    @property
    def organization(self):
        """Gets the organization of this Survey.  # noqa: E501


        :return: The organization of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Survey.


        :param organization: The organization of this Survey.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def created(self):
        """Gets the created of this Survey.  # noqa: E501


        :return: The created of this Survey.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Survey.


        :param created: The created of this Survey.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Survey.  # noqa: E501


        :return: The modified of this Survey.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Survey.


        :param modified: The modified of this Survey.  # noqa: E501
        :type: date
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Survey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
