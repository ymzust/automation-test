# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.user_settings import UserSettings  # noqa: F401,E501


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'full_name': 'str',
        'display_name': 'str',
        'email': 'str',
        'image': 'str',
        'last_read_alert': 'date',
        'roles': 'list[str]',
        'created': 'date',
        'modified': 'date',
        'settings': 'UserSettings',
        'keycloak_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'full_name': 'fullName',
        'display_name': 'displayName',
        'email': 'email',
        'image': 'image',
        'last_read_alert': 'lastReadAlert',
        'roles': 'roles',
        'created': 'created',
        'modified': 'modified',
        'settings': 'settings',
        'keycloak_id': 'keycloakId'
    }

    def __init__(self, id=None, full_name=None, display_name=None, email=None, image=None, last_read_alert=None, roles=None, created=None, modified=None, settings=None, keycloak_id=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._full_name = None
        self._display_name = None
        self._email = None
        self._image = None
        self._last_read_alert = None
        self._roles = None
        self._created = None
        self._modified = None
        self._settings = None
        self._keycloak_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if full_name is not None:
            self.full_name = full_name
        if display_name is not None:
            self.display_name = display_name
        self.email = email
        if image is not None:
            self.image = image
        if last_read_alert is not None:
            self.last_read_alert = last_read_alert
        if roles is not None:
            self.roles = roles
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if settings is not None:
            self.settings = settings
        if keycloak_id is not None:
            self.keycloak_id = keycloak_id

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501


        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def image(self):
        """Gets the image of this User.  # noqa: E501


        :return: The image of this User.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this User.


        :param image: The image of this User.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def last_read_alert(self):
        """Gets the last_read_alert of this User.  # noqa: E501


        :return: The last_read_alert of this User.  # noqa: E501
        :rtype: date
        """
        return self._last_read_alert

    @last_read_alert.setter
    def last_read_alert(self, last_read_alert):
        """Sets the last_read_alert of this User.


        :param last_read_alert: The last_read_alert of this User.  # noqa: E501
        :type: date
        """

        self._last_read_alert = last_read_alert

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501

        Keycloak roles  # noqa: E501

        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.

        Keycloak roles  # noqa: E501

        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this User.  # noqa: E501


        :return: The modified of this User.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this User.


        :param modified: The modified of this User.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def settings(self):
        """Gets the settings of this User.  # noqa: E501


        :return: The settings of this User.  # noqa: E501
        :rtype: UserSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this User.


        :param settings: The settings of this User.  # noqa: E501
        :type: UserSettings
        """

        self._settings = settings

    @property
    def keycloak_id(self):
        """Gets the keycloak_id of this User.  # noqa: E501


        :return: The keycloak_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._keycloak_id

    @keycloak_id.setter
    def keycloak_id(self, keycloak_id):
        """Sets the keycloak_id of this User.


        :param keycloak_id: The keycloak_id of this User.  # noqa: E501
        :type: str
        """

        self._keycloak_id = keycloak_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
