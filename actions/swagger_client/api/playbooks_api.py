# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PlaybooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_incident_playbooks(self, id, body, **kwargs):  # noqa: E501
        """Copy incident playbooks  # noqa: E501

        Copy correspondent playbooks to the incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_incident_playbooks(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param Body5 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_incident_playbooks_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_incident_playbooks_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def copy_incident_playbooks_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Copy incident playbooks  # noqa: E501

        Copy correspondent playbooks to the incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_incident_playbooks_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param Body5 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_incident_playbooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `copy_incident_playbooks`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_incident_playbooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/playbook/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def count_playbooks(self, **kwargs):  # noqa: E501
        """Count playbooks  # noqa: E501

        Count total number of playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_playbooks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_playbooks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.count_playbooks_with_http_info(**kwargs)  # noqa: E501
            return data

    def count_playbooks_with_http_info(self, **kwargs):  # noqa: E501
        """Count playbooks  # noqa: E501

        Count total number of playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_playbooks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'organization', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_playbooks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_playbook(self, body, **kwargs):  # noqa: E501
        """Create playbook  # noqa: E501

        Create a new playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_playbook(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Playbook body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_playbook_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_playbook_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_playbook_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create playbook  # noqa: E501

        Create a new playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_playbook_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Playbook body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playbook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_assigned(self, **kwargs):  # noqa: E501
        """Dashboard assigned  # noqa: E501

        Playbook actions assigned to current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_assigned(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: DashboardAssigned
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_assigned_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_assigned_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_assigned_with_http_info(self, **kwargs):  # noqa: E501
        """Dashboard assigned  # noqa: E501

        Playbook actions assigned to current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_assigned_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization:
        :param str authorization:
        :param str set_cookie:
        :return: DashboardAssigned
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_assigned" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/assigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardAssigned',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_playbook(self, id, **kwargs):  # noqa: E501
        """Get playbook  # noqa: E501

        Get one playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playbook(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_playbook_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_playbook_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_playbook_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get playbook  # noqa: E501

        Get one playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playbook_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playbook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_playbooks(self, **kwargs):  # noqa: E501
        """Get list of playbooks  # noqa: E501

        Get list of playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playbooks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str organization:
        :param str select:
        :param str authorization:
        :param str set_cookie:
        :return: list[Playbook]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_playbooks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_playbooks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_playbooks_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of playbooks  # noqa: E501

        Get list of playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playbooks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str where:
        :param str sort:
        :param int limit:
        :param int skip:
        :param str organization:
        :param str select:
        :param str authorization:
        :param str set_cookie:
        :return: list[Playbook]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'sort', 'limit', 'skip', 'organization', 'select', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_playbooks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Playbook]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incident_id_playbook_playbook_id_action_post(self, id, playbook_id, body, **kwargs):  # noqa: E501
        """Create playbook step in incident  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.incident_id_playbook_playbook_id_action_post(id, playbook_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str playbook_id: (required)
        :param EmbedPlaybookStep body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.incident_id_playbook_playbook_id_action_post_with_http_info(id, playbook_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.incident_id_playbook_playbook_id_action_post_with_http_info(id, playbook_id, body, **kwargs)  # noqa: E501
            return data

    def incident_id_playbook_playbook_id_action_post_with_http_info(self, id, playbook_id, body, **kwargs):  # noqa: E501
        """Create playbook step in incident  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.incident_id_playbook_playbook_id_action_post_with_http_info(id, playbook_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str playbook_id: (required)
        :param EmbedPlaybookStep body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playbook_id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incident_id_playbook_playbook_id_action_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `incident_id_playbook_playbook_id_action_post`")  # noqa: E501
        # verify the required parameter 'playbook_id' is set
        if ('playbook_id' not in params or
                params['playbook_id'] is None):
            raise ValueError("Missing the required parameter `playbook_id` when calling `incident_id_playbook_playbook_id_action_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `incident_id_playbook_playbook_id_action_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'playbook_id' in params:
            path_params['playbookId'] = params['playbook_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/playbook/{playbookId}/action', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_playbook_step_done(self, id, playbook_id, step_id, body, **kwargs):  # noqa: E501
        """Mark playbook done  # noqa: E501

        Mark playbook step as done  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_playbook_step_done(id, playbook_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param str playbook_id: Playbook id (required)
        :param str step_id: Playbook step id (required)
        :param Body4 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_playbook_step_done_with_http_info(id, playbook_id, step_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_playbook_step_done_with_http_info(id, playbook_id, step_id, body, **kwargs)  # noqa: E501
            return data

    def mark_playbook_step_done_with_http_info(self, id, playbook_id, step_id, body, **kwargs):  # noqa: E501
        """Mark playbook done  # noqa: E501

        Mark playbook step as done  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_playbook_step_done_with_http_info(id, playbook_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Incident id (required)
        :param str playbook_id: Playbook id (required)
        :param str step_id: Playbook step id (required)
        :param Body4 body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playbook_id', 'step_id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_playbook_step_done" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mark_playbook_step_done`")  # noqa: E501
        # verify the required parameter 'playbook_id' is set
        if ('playbook_id' not in params or
                params['playbook_id'] is None):
            raise ValueError("Missing the required parameter `playbook_id` when calling `mark_playbook_step_done`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `mark_playbook_step_done`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mark_playbook_step_done`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'playbook_id' in params:
            path_params['playbookId'] = params['playbook_id']  # noqa: E501
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/playbook/{playbookId}/action/{stepId}/done', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ordered_playbbok(self, id, **kwargs):  # noqa: E501
        """Get ordered playbook  # noqa: E501

        Get ordered playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ordered_playbbok(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook Id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ordered_playbbok_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ordered_playbbok_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ordered_playbbok_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get ordered playbook  # noqa: E501

        Get ordered playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ordered_playbbok_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook Id (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ordered_playbbok" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ordered_playbbok`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/{id}/ordered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playbook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playbook_automation_get(self, **kwargs):  # noqa: E501
        """List of available playbook automation methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playbook_automation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playbook_automation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.playbook_automation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def playbook_automation_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of available playbook automation methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playbook_automation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str set_cookie:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playbook_automation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/automation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_playbook(self, id, **kwargs):  # noqa: E501
        """Remove playbook  # noqa: E501

        Remove existing playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_playbook(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param str authorization:
        :param str set_cookie:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_playbook_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_playbook_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_playbook_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove playbook  # noqa: E501

        Remove existing playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_playbook_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param str authorization:
        :param str set_cookie:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_incident_playbook(self, id, playbook_id, step_id, body, **kwargs):  # noqa: E501
        """Update incident playbook step  # noqa: E501

        Update playbook step in incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident_playbook(id, playbook_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str playbook_id: (required)
        :param str step_id: (required)
        :param EmbedPlaybookStep body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_incident_playbook_with_http_info(id, playbook_id, step_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_incident_playbook_with_http_info(id, playbook_id, step_id, body, **kwargs)  # noqa: E501
            return data

    def update_incident_playbook_with_http_info(self, id, playbook_id, step_id, body, **kwargs):  # noqa: E501
        """Update incident playbook step  # noqa: E501

        Update playbook step in incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_incident_playbook_with_http_info(id, playbook_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str playbook_id: (required)
        :param str step_id: (required)
        :param EmbedPlaybookStep body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Incident
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playbook_id', 'step_id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_incident_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_incident_playbook`")  # noqa: E501
        # verify the required parameter 'playbook_id' is set
        if ('playbook_id' not in params or
                params['playbook_id'] is None):
            raise ValueError("Missing the required parameter `playbook_id` when calling `update_incident_playbook`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if ('step_id' not in params or
                params['step_id'] is None):
            raise ValueError("Missing the required parameter `step_id` when calling `update_incident_playbook`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_incident_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'playbook_id' in params:
            path_params['playbookId'] = params['playbook_id']  # noqa: E501
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/incident/{id}/playbook/{playbookId}/action/{stepId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Incident',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_playbook(self, id, body, **kwargs):  # noqa: E501
        """Update playbook  # noqa: E501

        Update an existing playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_playbook(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param Playbook body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_playbook_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_playbook_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_playbook_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update playbook  # noqa: E501

        Update an existing playbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_playbook_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Playbook id (required)
        :param Playbook body: (required)
        :param str authorization:
        :param str set_cookie:
        :return: Playbook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization', 'set_cookie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_playbook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_playbook`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_playbook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'set_cookie' in params:
            header_params['Set-Cookie'] = params['set_cookie']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key']  # noqa: E501

        return self.api_client.call_api(
            '/playbook/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playbook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
