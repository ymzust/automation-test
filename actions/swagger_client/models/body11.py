# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body11(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'roles': 'str',
        'organization': 'str'
    }

    attribute_map = {
        'email': 'email',
        'roles': 'roles',
        'organization': 'organization'
    }

    def __init__(self, email=None, roles=None, organization=None):  # noqa: E501
        """Body11 - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._roles = None
        self._organization = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if roles is not None:
            self.roles = roles
        if organization is not None:
            self.organization = organization

    @property
    def email(self):
        """Gets the email of this Body11.  # noqa: E501

        Can be changed only by global user  # noqa: E501

        :return: The email of this Body11.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Body11.

        Can be changed only by global user  # noqa: E501

        :param email: The email of this Body11.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def roles(self):
        """Gets the roles of this Body11.  # noqa: E501

        Role id list  # noqa: E501

        :return: The roles of this Body11.  # noqa: E501
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Body11.

        Role id list  # noqa: E501

        :param roles: The roles of this Body11.  # noqa: E501
        :type: str
        """

        self._roles = roles

    @property
    def organization(self):
        """Gets the organization of this Body11.  # noqa: E501

        Organization in which user is updated  # noqa: E501

        :return: The organization of this Body11.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Body11.

        Organization in which user is updated  # noqa: E501

        :param organization: The organization of this Body11.  # noqa: E501
        :type: str
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body11):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
