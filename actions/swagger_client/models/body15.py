# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body15(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organization': 'str',
        'from_date': 'str',
        'to_date': 'str',
        'timezone': 'int',
        'download': 'bool',
        'with_children': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'organization': 'organization',
        'from_date': 'fromDate',
        'to_date': 'toDate',
        'timezone': 'timezone',
        'download': 'download',
        'with_children': 'withChildren'
    }

    def __init__(self, name=None, organization=None, from_date=None, to_date=None, timezone=None, download=None, with_children=None):  # noqa: E501
        """Body15 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._organization = None
        self._from_date = None
        self._to_date = None
        self._timezone = None
        self._download = None
        self._with_children = None
        self.discriminator = None

        self.name = name
        self.organization = organization
        self.from_date = from_date
        self.to_date = to_date
        self.timezone = timezone
        if download is not None:
            self.download = download
        if with_children is not None:
            self.with_children = with_children

    @property
    def name(self):
        """Gets the name of this Body15.  # noqa: E501


        :return: The name of this Body15.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body15.


        :param name: The name of this Body15.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Body15.  # noqa: E501


        :return: The organization of this Body15.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Body15.


        :param organization: The organization of this Body15.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def from_date(self):
        """Gets the from_date of this Body15.  # noqa: E501

        MM/DD/YYYY HH:mm  # noqa: E501

        :return: The from_date of this Body15.  # noqa: E501
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Body15.

        MM/DD/YYYY HH:mm  # noqa: E501

        :param from_date: The from_date of this Body15.  # noqa: E501
        :type: str
        """
        if from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")  # noqa: E501

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this Body15.  # noqa: E501

        MM/DD/YYYY HH:mm  # noqa: E501

        :return: The to_date of this Body15.  # noqa: E501
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Body15.

        MM/DD/YYYY HH:mm  # noqa: E501

        :param to_date: The to_date of this Body15.  # noqa: E501
        :type: str
        """
        if to_date is None:
            raise ValueError("Invalid value for `to_date`, must not be `None`")  # noqa: E501

        self._to_date = to_date

    @property
    def timezone(self):
        """Gets the timezone of this Body15.  # noqa: E501

        Timezone used in report dates  # noqa: E501

        :return: The timezone of this Body15.  # noqa: E501
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Body15.

        Timezone used in report dates  # noqa: E501

        :param timezone: The timezone of this Body15.  # noqa: E501
        :type: int
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def download(self):
        """Gets the download of this Body15.  # noqa: E501

        Download report after generation  # noqa: E501

        :return: The download of this Body15.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this Body15.

        Download report after generation  # noqa: E501

        :param download: The download of this Body15.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def with_children(self):
        """Gets the with_children of this Body15.  # noqa: E501

        Include sub-organizations  # noqa: E501

        :return: The with_children of this Body15.  # noqa: E501
        :rtype: bool
        """
        return self._with_children

    @with_children.setter
    def with_children(self, with_children):
        """Sets the with_children of this Body15.

        Include sub-organizations  # noqa: E501

        :param with_children: The with_children of this Body15.  # noqa: E501
        :type: bool
        """

        self._with_children = with_children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body15):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
