# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.channel_users import ChannelUsers  # noqa: F401,E501


class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'users': 'list[ChannelUsers]',
        'owner': 'str',
        'created': 'date',
        'modified': 'date',
        'unread': 'bool',
        'last_read': 'date',
        'last_read_thread': 'date'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'type': 'type',
        'users': 'users',
        'owner': 'owner',
        'created': 'created',
        'modified': 'modified',
        'unread': 'unread',
        'last_read': 'lastRead',
        'last_read_thread': 'lastReadThread'
    }

    def __init__(self, id=None, name=None, type=None, users=None, owner=None, created=None, modified=None, unread=None, last_read=None, last_read_thread=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._users = None
        self._owner = None
        self._created = None
        self._modified = None
        self._unread = None
        self._last_read = None
        self._last_read_thread = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        if users is not None:
            self.users = users
        if owner is not None:
            self.owner = owner
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if unread is not None:
            self.unread = unread
        if last_read is not None:
            self.last_read = last_read
        if last_read_thread is not None:
            self.last_read_thread = last_read_thread

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501


        :return: The id of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Channel.  # noqa: E501


        :return: The name of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.


        :param name: The name of this Channel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Channel.  # noqa: E501


        :return: The type of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.


        :param type: The type of this Channel.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["public", "private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def users(self):
        """Gets the users of this Channel.  # noqa: E501

        User of private channel  # noqa: E501

        :return: The users of this Channel.  # noqa: E501
        :rtype: list[ChannelUsers]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Channel.

        User of private channel  # noqa: E501

        :param users: The users of this Channel.  # noqa: E501
        :type: list[ChannelUsers]
        """

        self._users = users

    @property
    def owner(self):
        """Gets the owner of this Channel.  # noqa: E501


        :return: The owner of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Channel.


        :param owner: The owner of this Channel.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def created(self):
        """Gets the created of this Channel.  # noqa: E501


        :return: The created of this Channel.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Channel.


        :param created: The created of this Channel.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Channel.  # noqa: E501


        :return: The modified of this Channel.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Channel.


        :param modified: The modified of this Channel.  # noqa: E501
        :type: date
        """

        self._modified = modified

    @property
    def unread(self):
        """Gets the unread of this Channel.  # noqa: E501


        :return: The unread of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Channel.


        :param unread: The unread of this Channel.  # noqa: E501
        :type: bool
        """

        self._unread = unread

    @property
    def last_read(self):
        """Gets the last_read of this Channel.  # noqa: E501


        :return: The last_read of this Channel.  # noqa: E501
        :rtype: date
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this Channel.


        :param last_read: The last_read of this Channel.  # noqa: E501
        :type: date
        """

        self._last_read = last_read

    @property
    def last_read_thread(self):
        """Gets the last_read_thread of this Channel.  # noqa: E501


        :return: The last_read_thread of this Channel.  # noqa: E501
        :rtype: date
        """
        return self._last_read_thread

    @last_read_thread.setter
    def last_read_thread(self, last_read_thread):
        """Sets the last_read_thread of this Channel.


        :param last_read_thread: The last_read_thread of this Channel.  # noqa: E501
        :type: date
        """

        self._last_read_thread = last_read_thread

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
