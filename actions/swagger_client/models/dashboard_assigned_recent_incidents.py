# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.observable_organization import ObservableOrganization  # noqa: F401,E501


class DashboardAssignedRecentIncidents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'date_for_sort': 'str',
        'organization': 'ObservableOrganization',
        'name': 'str',
        'status': 'str',
        'priority': 'str'
    }

    attribute_map = {
        'id': '_id',
        'date_for_sort': 'dateForSort',
        'organization': 'organization',
        'name': 'name',
        'status': 'status',
        'priority': 'priority'
    }

    def __init__(self, id=None, date_for_sort=None, organization=None, name=None, status=None, priority=None):  # noqa: E501
        """DashboardAssignedRecentIncidents - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_for_sort = None
        self._organization = None
        self._name = None
        self._status = None
        self._priority = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if date_for_sort is not None:
            self.date_for_sort = date_for_sort
        if organization is not None:
            self.organization = organization
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if priority is not None:
            self.priority = priority

    @property
    def id(self):
        """Gets the id of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The id of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardAssignedRecentIncidents.


        :param id: The id of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date_for_sort(self):
        """Gets the date_for_sort of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The date_for_sort of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: str
        """
        return self._date_for_sort

    @date_for_sort.setter
    def date_for_sort(self, date_for_sort):
        """Sets the date_for_sort of this DashboardAssignedRecentIncidents.


        :param date_for_sort: The date_for_sort of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: str
        """

        self._date_for_sort = date_for_sort

    @property
    def organization(self):
        """Gets the organization of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The organization of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: ObservableOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this DashboardAssignedRecentIncidents.


        :param organization: The organization of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: ObservableOrganization
        """

        self._organization = organization

    @property
    def name(self):
        """Gets the name of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The name of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardAssignedRecentIncidents.


        :param name: The name of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The status of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DashboardAssignedRecentIncidents.


        :param status: The status of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def priority(self):
        """Gets the priority of this DashboardAssignedRecentIncidents.  # noqa: E501


        :return: The priority of this DashboardAssignedRecentIncidents.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DashboardAssignedRecentIncidents.


        :param priority: The priority of this DashboardAssignedRecentIncidents.  # noqa: E501
        :type: str
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardAssignedRecentIncidents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
