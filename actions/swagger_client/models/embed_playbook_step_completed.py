# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.embed_playbook_step_user import EmbedPlaybookStepUser  # noqa: F401,E501


class EmbedPlaybookStepCompleted(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'EmbedPlaybookStepUser',
        'completed_at': 'date',
        'rating': 'int'
    }

    attribute_map = {
        'user': 'user',
        'completed_at': 'completedAt',
        'rating': 'rating'
    }

    def __init__(self, user=None, completed_at=None, rating=None):  # noqa: E501
        """EmbedPlaybookStepCompleted - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._completed_at = None
        self._rating = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if completed_at is not None:
            self.completed_at = completed_at
        if rating is not None:
            self.rating = rating

    @property
    def user(self):
        """Gets the user of this EmbedPlaybookStepCompleted.  # noqa: E501


        :return: The user of this EmbedPlaybookStepCompleted.  # noqa: E501
        :rtype: EmbedPlaybookStepUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EmbedPlaybookStepCompleted.


        :param user: The user of this EmbedPlaybookStepCompleted.  # noqa: E501
        :type: EmbedPlaybookStepUser
        """

        self._user = user

    @property
    def completed_at(self):
        """Gets the completed_at of this EmbedPlaybookStepCompleted.  # noqa: E501


        :return: The completed_at of this EmbedPlaybookStepCompleted.  # noqa: E501
        :rtype: date
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this EmbedPlaybookStepCompleted.


        :param completed_at: The completed_at of this EmbedPlaybookStepCompleted.  # noqa: E501
        :type: date
        """

        self._completed_at = completed_at

    @property
    def rating(self):
        """Gets the rating of this EmbedPlaybookStepCompleted.  # noqa: E501

        How much the step was helpful  # noqa: E501

        :return: The rating of this EmbedPlaybookStepCompleted.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this EmbedPlaybookStepCompleted.

        How much the step was helpful  # noqa: E501

        :param rating: The rating of this EmbedPlaybookStepCompleted.  # noqa: E501
        :type: int
        """

        self._rating = rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbedPlaybookStepCompleted):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
