# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.incident_related_incidents_by_tag import IncidentRelatedIncidentsByTag  # noqa: F401,E501


class IncidentRelatedIncidents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'by_tag': 'list[IncidentRelatedIncidentsByTag]',
        'by_observable': 'list[IncidentRelatedIncidentsByTag]'
    }

    attribute_map = {
        'by_tag': 'byTag',
        'by_observable': 'byObservable'
    }

    def __init__(self, by_tag=None, by_observable=None):  # noqa: E501
        """IncidentRelatedIncidents - a model defined in Swagger"""  # noqa: E501

        self._by_tag = None
        self._by_observable = None
        self.discriminator = None

        if by_tag is not None:
            self.by_tag = by_tag
        if by_observable is not None:
            self.by_observable = by_observable

    @property
    def by_tag(self):
        """Gets the by_tag of this IncidentRelatedIncidents.  # noqa: E501

        Related incidents by tags  # noqa: E501

        :return: The by_tag of this IncidentRelatedIncidents.  # noqa: E501
        :rtype: list[IncidentRelatedIncidentsByTag]
        """
        return self._by_tag

    @by_tag.setter
    def by_tag(self, by_tag):
        """Sets the by_tag of this IncidentRelatedIncidents.

        Related incidents by tags  # noqa: E501

        :param by_tag: The by_tag of this IncidentRelatedIncidents.  # noqa: E501
        :type: list[IncidentRelatedIncidentsByTag]
        """

        self._by_tag = by_tag

    @property
    def by_observable(self):
        """Gets the by_observable of this IncidentRelatedIncidents.  # noqa: E501

        Related incidents by observables  # noqa: E501

        :return: The by_observable of this IncidentRelatedIncidents.  # noqa: E501
        :rtype: list[IncidentRelatedIncidentsByTag]
        """
        return self._by_observable

    @by_observable.setter
    def by_observable(self, by_observable):
        """Sets the by_observable of this IncidentRelatedIncidents.

        Related incidents by observables  # noqa: E501

        :param by_observable: The by_observable of this IncidentRelatedIncidents.  # noqa: E501
        :type: list[IncidentRelatedIncidentsByTag]
        """

        self._by_observable = by_observable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentRelatedIncidents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
