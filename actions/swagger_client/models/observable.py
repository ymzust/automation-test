# coding: utf-8

"""
    CyberProof Platform Backend API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.observable_details import ObservableDetails  # noqa: F401,E501
from swagger_client.models.observable_enrichment import ObservableEnrichment  # noqa: F401,E501
from swagger_client.models.observable_organization import ObservableOrganization  # noqa: F401,E501
from swagger_client.models.observable_owner import ObservableOwner  # noqa: F401,E501


class Observable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'value': 'str',
        'type': 'str',
        'organization': 'ObservableOrganization',
        'related_alerts_length': 'int',
        'related_incidents_length': 'int',
        'tags': 'list[str]',
        'owner': 'ObservableOwner',
        'details': 'list[ObservableDetails]',
        'enrichments': 'list[ObservableEnrichment]',
        'created': 'date',
        'modified': 'date'
    }

    attribute_map = {
        'id': '_id',
        'value': 'value',
        'type': 'type',
        'organization': 'organization',
        'related_alerts_length': 'relatedAlertsLength',
        'related_incidents_length': 'relatedIncidentsLength',
        'tags': 'tags',
        'owner': 'owner',
        'details': 'details',
        'enrichments': 'enrichments',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, id=None, value=None, type=None, organization=None, related_alerts_length=None, related_incidents_length=None, tags=None, owner=None, details=None, enrichments=None, created=None, modified=None):  # noqa: E501
        """Observable - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._value = None
        self._type = None
        self._organization = None
        self._related_alerts_length = None
        self._related_incidents_length = None
        self._tags = None
        self._owner = None
        self._details = None
        self._enrichments = None
        self._created = None
        self._modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.value = value
        self.type = type
        self.organization = organization
        if related_alerts_length is not None:
            self.related_alerts_length = related_alerts_length
        if related_incidents_length is not None:
            self.related_incidents_length = related_incidents_length
        if tags is not None:
            self.tags = tags
        if owner is not None:
            self.owner = owner
        if details is not None:
            self.details = details
        if enrichments is not None:
            self.enrichments = enrichments
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Observable.  # noqa: E501


        :return: The id of this Observable.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Observable.


        :param id: The id of this Observable.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this Observable.  # noqa: E501


        :return: The value of this Observable.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Observable.


        :param value: The value of this Observable.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def type(self):
        """Gets the type of this Observable.  # noqa: E501

        Value from metamodels  # noqa: E501

        :return: The type of this Observable.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Observable.

        Value from metamodels  # noqa: E501

        :param type: The type of this Observable.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def organization(self):
        """Gets the organization of this Observable.  # noqa: E501


        :return: The organization of this Observable.  # noqa: E501
        :rtype: ObservableOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Observable.


        :param organization: The organization of this Observable.  # noqa: E501
        :type: ObservableOrganization
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def related_alerts_length(self):
        """Gets the related_alerts_length of this Observable.  # noqa: E501


        :return: The related_alerts_length of this Observable.  # noqa: E501
        :rtype: int
        """
        return self._related_alerts_length

    @related_alerts_length.setter
    def related_alerts_length(self, related_alerts_length):
        """Sets the related_alerts_length of this Observable.


        :param related_alerts_length: The related_alerts_length of this Observable.  # noqa: E501
        :type: int
        """

        self._related_alerts_length = related_alerts_length

    @property
    def related_incidents_length(self):
        """Gets the related_incidents_length of this Observable.  # noqa: E501


        :return: The related_incidents_length of this Observable.  # noqa: E501
        :rtype: int
        """
        return self._related_incidents_length

    @related_incidents_length.setter
    def related_incidents_length(self, related_incidents_length):
        """Sets the related_incidents_length of this Observable.


        :param related_incidents_length: The related_incidents_length of this Observable.  # noqa: E501
        :type: int
        """

        self._related_incidents_length = related_incidents_length

    @property
    def tags(self):
        """Gets the tags of this Observable.  # noqa: E501


        :return: The tags of this Observable.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Observable.


        :param tags: The tags of this Observable.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def owner(self):
        """Gets the owner of this Observable.  # noqa: E501


        :return: The owner of this Observable.  # noqa: E501
        :rtype: ObservableOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Observable.


        :param owner: The owner of this Observable.  # noqa: E501
        :type: ObservableOwner
        """

        self._owner = owner

    @property
    def details(self):
        """Gets the details of this Observable.  # noqa: E501


        :return: The details of this Observable.  # noqa: E501
        :rtype: list[ObservableDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Observable.


        :param details: The details of this Observable.  # noqa: E501
        :type: list[ObservableDetails]
        """

        self._details = details

    @property
    def enrichments(self):
        """Gets the enrichments of this Observable.  # noqa: E501


        :return: The enrichments of this Observable.  # noqa: E501
        :rtype: list[ObservableEnrichment]
        """
        return self._enrichments

    @enrichments.setter
    def enrichments(self, enrichments):
        """Sets the enrichments of this Observable.


        :param enrichments: The enrichments of this Observable.  # noqa: E501
        :type: list[ObservableEnrichment]
        """

        self._enrichments = enrichments

    @property
    def created(self):
        """Gets the created of this Observable.  # noqa: E501


        :return: The created of this Observable.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Observable.


        :param created: The created of this Observable.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Observable.  # noqa: E501


        :return: The modified of this Observable.  # noqa: E501
        :rtype: date
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Observable.


        :param modified: The modified of this Observable.  # noqa: E501
        :type: date
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Observable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
